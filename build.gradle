import aQute.bnd.gradle.Resolve
import aQute.bnd.osgi.Domain
import io.spring.gradle.dependencymanagement.internal.pom.PomReference
import io.spring.gradle.dependencymanagement.internal.pom.Coordinates

buildscript {
	dependencies {
		classpath group: "io.spring.gradle", name: "dependency-management-plugin", version: "1.0.4.RELEASE"
		classpath group: "biz.aQute.bnd", name: "biz.aQute.bnd.gradle", version: "3.5.0"
	}

	repositories {
		maven {
			url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: 'java-base'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'biz.aQute.bnd.builder'

configurations {
	targetPlatform
}

eclipse {
	project {
		natures 'org.eclipse.jdt.core.javanature'
	}
	classpath {
		plusConfigurations += [ configurations.targetPlatform ]
	}
}

repositories {
	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}

	maven {
		credentials {
			username "$nexusUsername"
			password "$nexusPassword"
		}

		url "https://repository.liferay.com/nexus/content/repositories/xanadu/"
	}

	mavenLocal()
}

def poms = [new PomReference(new Coordinates("com.liferay.releases.ce","com.liferay.releases.ce.release","7.1.0"))]

dependencyManagement.pomConfigurer.dependencyManagement.pomResolver.resolvePomsLeniently(poms).each {
	it.managedDependencies.each { dep ->
		if (dep.type == "jar" && dep.coordinates.groupId.startsWith("com.liferay")) {
			def gav = dep.coordinates
			dependencies.add('targetPlatform', "${gav.groupId}:${gav.artifactId}:${gav.version}", {transitive = false})
		}
	}
}

dependencies.add('targetPlatform', 'javax.portlet:portlet-api:2.0', { transitive = false })
dependencies.add('targetPlatform', 'org.osgi:osgi.core:6.0.0', { transitive = false })
dependencies.add('targetPlatform', 'org.osgi:osgi.cmpn:6.0.0', { transitive = false })
dependencies.add('targetPlatform', 'javax.portlet:portlet-api:2.0', {transitive = false})
dependencies.add('targetPlatform', 'javax.servlet:javax.servlet-api:3.0.1', {transitive = false})
dependencies.add('targetPlatform', 'javax.servlet.jsp.jstl:jstl-api:1.2', {transitive = false})


Set<Project> bundleProjects = subprojects.findAll {
	it.file('bnd.bnd').exists()
}

task setupResolve {
	doFirst {
		new File("${buildDir}/distro.xml").withWriter('UTF-8') { writer ->
			writer.write "<?xml version='1.0' encoding='UTF-8'?>"
			writer.write '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n'
			writer.write '  <modelVersion>4.0.0</modelVersion>\n'
			writer.write '  <artifactId>distro</artifactId>\n'
			writer.write '  <dependencies>\n'
			writer.write '    <dependency>\n'
			writer.write '      <groupId>com.liferay.releases.ce</groupId>\n'
			writer.write '      <artifactId>com.liferay.releases.ce.distro</artifactId>\n'
			writer.write '      <version>7.1.0</version>\n'
			writer.write '    </dependency>\n'
			writer.write '  </dependencies>\n'
			writer.write '</project>'
		}

		new File("${buildDir}/resolve.bndrun").withWriter('UTF-8') { writer ->
			writer.write '-standalone:\n'
			writer.write '-resourceonly: true\n'
			writer.write '-resolve.effective: resolve, active\n'
			//writer.write '-distro: com.liferay.releases.ce.distro\n'
			writer.write '-distro: ${.}/../distro.jar;version=file\n'
			//writer.write "-include: \"${projectDir}/services.bnd\"\n"
			//writer.write '-plugin.distro=\\\n'
			//writer.write '  aQute.bnd.repository.maven.pom.provider.BndPomRepository;\\\n'
			//writer.write '    releaseUrls=https://repository.liferay.com/nexus/content/repositories/xanadu/;\\\n'
			//writer.write "    pom=\"${buildDir}/distro.xml\";\\\n"
			//writer.write "    location=\"${buildDir}/pom-distro.xml\";\\\n"
			//writer.write '    name=distro\n'
			writer.write '-runrequires:\\\n'
			bundleProjects.each {
				Domain jar = Domain.domain(it.jar.archivePath)
				writer.write "  osgi.identity;filter:='(osgi.identity=" + jar.bundleSymbolicName.key + ")'"
				if (it != bundleProjects.last()) {
					writer.write ",\\\n"
				}
			}
		}
	}
}

task resolve(type: Resolve) {
	dependsOn setupResolve, {
		bundleProjects.collect { "${it.path}:jar" }
	}

	bndrun = "${buildDir}/resolve.bndrun"

	bundles {
		bundleProjects.collect {
			it.configurations.archives.artifacts.file
		}
	}
}

subprojects { subproject ->
	subproject.plugins.withId('java') {
		subproject.apply plugin: "io.spring.dependency-management"

		subproject.dependencyManagement {
			imports {
				mavenBom(subproject.rootProject.properties["liferay.workspace.target.platform"])
			}
			dependencies {
				dependency "javax.portlet:portlet-api:2.0"
				dependency "org.osgi:osgi.core:6.0.0"
				dependency "org.osgi:osgi.cmpn:6.0.0"
				dependency "javax.portlet:portlet-api:2.0"
				dependency "javax.servlet:javax.servlet-api:3.0.1"
				dependency "javax.servlet.jsp.jstl:jstl-api:1.2"
			}
		}

		subproject.repositories {
			maven {
				url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
			}

			maven {
				credentials {
					username "$nexusUsername"
					password "$nexusPassword"
				}

				url "https://repository.liferay.com/nexus/content/repositories/xanadu/"
			}

			mavenLocal()
		}
	}
}
